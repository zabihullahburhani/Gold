برای هر فایل لینک مکمل و نوسنده کد را اضافه کن
مدیریت کارمندان مکمل فعال است.
کد های بک اند:
# path: backend/app/api/v1/users.py
from fastapi import APIRouter, Depends, HTTPException, status, UploadFile, File, Form
from sqlalchemy.orm import Session
from typing import List, Optional
import os, shutil

from app.core.database import get_db
from app.core.security import get_current_user, require_admin
from app.schemas.user import EmployeeOut
from app.crud.user import list_users, create_employee, update_employee, delete_employee, change_role

router = APIRouter(prefix="/users", tags=["users"])

PROFILE_PICS_DIR = "static/profile_pics"
os.makedirs(PROFILE_PICS_DIR, exist_ok=True)

@router.get("/", response_model=List[EmployeeOut])
def get_users(db: Session = Depends(get_db), current=Depends(require_admin)):
    rows = list_users(db)
    return [
        EmployeeOut(
            employee_id=r.employee.employee_id,
            full_name=r.employee.full_name,
            role=r.employee.role,
            phone=r.employee.phone,
            username=r.username,
            profile_pic=r.employee.profile_pic
        ) for r in rows
    ]

# Create via FormData (compatible with your CreateUser component)
@router.post("/", response_model=EmployeeOut)
def create_new_user(
    db: Session = Depends(get_db),
    current=Depends(require_admin),
    full_name: str = Form(...),
    username: str = Form(...),
    password: str = Form(...),
    role: str = Form("user"),
    phone: Optional[str] = Form(None),
    profile_pic: Optional[UploadFile] = File(None),
):
    pic_path = None
    if profile_pic:
        filename = f"{username}_{profile_pic.filename}"
        pic_path = os.path.join(PROFILE_PICS_DIR, filename)
        with open(pic_path, "wb") as f:
            shutil.copyfileobj(profile_pic.file, f)

    emp = create_employee(
        db,
        full_name=full_name,
        role=role,
        phone=phone,
        username=username,
        password=password,
        profile_pic=pic_path,
    )

    return EmployeeOut(
        employee_id=emp.employee_id,
        full_name=emp.full_name,
        role=emp.role,
        phone=emp.phone,
        username=emp.login.username,
        profile_pic=emp.profile_pic,
    )

@router.put("/{employee_id}", response_model=EmployeeOut)
def edit_employee(
    employee_id: int,
    db: Session = Depends(get_db),
    current=Depends(require_admin),
    full_name: Optional[str] = Form(None),
    role: Optional[str] = Form(None),
    phone: Optional[str] = Form(None),
    password: Optional[str] = Form(None),
    profile_pic: Optional[UploadFile] = File(None),
):
    pic_path = None
    if profile_pic:
        filename = f"{employee_id}_{profile_pic.filename}"
        pic_path = os.path.join(PROFILE_PICS_DIR, filename)
        with open(pic_path, "wb") as f:
            shutil.copyfileobj(profile_pic.file, f)

    emp = update_employee(
        db,
        employee_id,
        full_name=full_name,
        role=role,
        phone=phone,
        password=password,
        profile_pic_path=pic_path,
    )
    if not emp:
        raise HTTPException(status_code=404, detail="Employee not found")

    return EmployeeOut(
        employee_id=emp.employee_id,
        full_name=emp.full_name,
        role=emp.role,
        phone=emp.phone,
        username=emp.login.username if emp.login else "",
        profile_pic=emp.profile_pic,
    )

@router.delete("/{employee_id}")
def remove_employee(employee_id: int, db: Session = Depends(get_db), current=Depends(require_admin)):
    ok = delete_employee(db, employee_id)
    if not ok:
        raise HTTPException(status_code=404, detail="Employee not found")
    return {"detail": "Employee deleted successfully"}

@router.patch("/{employee_id}/role", response_model=EmployeeOut)
def update_role(employee_id: int, new_role: str = Form(...), db: Session = Depends(get_db), current=Depends(require_admin)):
    emp = change_role(db, employee_id, new_role)
    if not emp:
        raise HTTPException(status_code=404, detail="Employee not found")
    return EmployeeOut(
        employee_id=emp.employee_id,
        full_name=emp.full_name,
        role=emp.role,
        phone=emp.phone,
        username=emp.login.username if emp.login else "",
        profile_pic=emp.profile_pic,
    )

# created by: professor zabihullah burhani
# ICT and AI and Robotics متخصص
# phone: 0705002913, email: zabihullahburhani@gmail.com
# Address: Takhar University, COmputer science faculty.

# path: backend/app/api/v1/users.py
from fastapi import APIRouter, Depends, HTTPException, status, UploadFile, File, Form
from sqlalchemy.orm import Session
from typing import List, Optional
import os, shutil

from app.core.database import get_db
from app.core.security import get_current_user, require_admin
from app.schemas.user import EmployeeOut
from app.crud.user import list_users, create_employee, update_employee, delete_employee, change_role

router = APIRouter(prefix="/users", tags=["users"])

PROFILE_PICS_DIR = "static/profile_pics"
os.makedirs(PROFILE_PICS_DIR, exist_ok=True)

@router.get("/", response_model=List[EmployeeOut])
def get_users(db: Session = Depends(get_db), current=Depends(require_admin)):
    rows = list_users(db)
    return [
        EmployeeOut(
            employee_id=r.employee.employee_id,
            full_name=r.employee.full_name,
            role=r.employee.role,
            phone=r.employee.phone,
            username=r.username,
            profile_pic=r.employee.profile_pic
        ) for r in rows
    ]

# Create via FormData (compatible with your CreateUser component)
@router.post("/", response_model=EmployeeOut)
def create_new_user(
    db: Session = Depends(get_db),
    current=Depends(require_admin),
    full_name: str = Form(...),
    username: str = Form(...),
    password: str = Form(...),
    role: str = Form("user"),
    phone: Optional[str] = Form(None),
    profile_pic: Optional[UploadFile] = File(None),
):
    pic_path = None
    if profile_pic:
        filename = f"{username}_{profile_pic.filename}"
        pic_path = os.path.join(PROFILE_PICS_DIR, filename)
        with open(pic_path, "wb") as f:
            shutil.copyfileobj(profile_pic.file, f)

    emp = create_employee(
        db,
        full_name=full_name,
        role=role,
        phone=phone,
        username=username,
        password=password,
        profile_pic=pic_path,
    )

    return EmployeeOut(
        employee_id=emp.employee_id,
        full_name=emp.full_name,
        role=emp.role,
        phone=emp.phone,
        username=emp.login.username,
        profile_pic=emp.profile_pic,
    )

@router.put("/{employee_id}", response_model=EmployeeOut)
def edit_employee(
    employee_id: int,
    db: Session = Depends(get_db),
    current=Depends(require_admin),
    full_name: Optional[str] = Form(None),
    role: Optional[str] = Form(None),
    phone: Optional[str] = Form(None),
    password: Optional[str] = Form(None),
    profile_pic: Optional[UploadFile] = File(None),
):
    pic_path = None
    if profile_pic:
        filename = f"{employee_id}_{profile_pic.filename}"
        pic_path = os.path.join(PROFILE_PICS_DIR, filename)
        with open(pic_path, "wb") as f:
            shutil.copyfileobj(profile_pic.file, f)

    emp = update_employee(
        db,
        employee_id,
        full_name=full_name,
        role=role,
        phone=phone,
        password=password,
        profile_pic_path=pic_path,
    )
    if not emp:
        raise HTTPException(status_code=404, detail="Employee not found")

    return EmployeeOut(
        employee_id=emp.employee_id,
        full_name=emp.full_name,
        role=emp.role,
        phone=emp.phone,
        username=emp.login.username if emp.login else "",
        profile_pic=emp.profile_pic,
    )

@router.delete("/{employee_id}")
def remove_employee(employee_id: int, db: Session = Depends(get_db), current=Depends(require_admin)):
    ok = delete_employee(db, employee_id)
    if not ok:
        raise HTTPException(status_code=404, detail="Employee not found")
    return {"detail": "Employee deleted successfully"}

@router.patch("/{employee_id}/role", response_model=EmployeeOut)
def update_role(employee_id: int, new_role: str = Form(...), db: Session = Depends(get_db), current=Depends(require_admin)):
    emp = change_role(db, employee_id, new_role)
    if not emp:
        raise HTTPException(status_code=404, detail="Employee not found")
    return EmployeeOut(
        employee_id=emp.employee_id,
        full_name=emp.full_name,
        role=emp.role,
        phone=emp.phone,
        username=emp.login.username if emp.login else "",
        profile_pic=emp.profile_pic,
    )

# created by: professor zabihullah burhani
# ICT and AI and Robotics متخصص
# phone: 0705002913, email: zabihullahburhani@gmail.com
# Address: Takhar University, COmputer science faculty.

# path: backend/app/crud/user.py
from sqlalchemy.orm import Session
from sqlalchemy import select
from app.models.user import Employee, Login
from app.core.security import hash_password

def get_login_by_username(db: Session, username: str) -> Login | None:
    return db.execute(select(Login).where(Login.username == username)).scalar_one_or_none()

def create_employee(db: Session, full_name: str, role: str, phone: str | None, username: str, password: str, profile_pic: str | None = None) -> Employee:
    employee = Employee(full_name=full_name, role=role, phone=phone, profile_pic=profile_pic)
    db.add(employee)
    db.flush()  # get employee_id before commit

    login = Login(employee_id=employee.employee_id, username=username, password_hash=hash_password(password))
    db.add(login)
    db.commit()
    db.refresh(employee)
    db.refresh(login)
    return employee

def list_users(db: Session) -> list[Login]:
    # برمی‌گرداند لاگین‌ها به همراه employee برای دسترسی به username/role/...
    return db.execute(select(Login)).scalars().all()

def get_employee_by_id(db: Session, employee_id: int) -> Employee | None:
    return db.get(Employee, employee_id)

def update_employee(db: Session, employee_id: int, *, full_name=None, role=None, phone=None, password=None, profile_pic_path=None) -> Employee | None:
    employee = get_employee_by_id(db, employee_id)
    if not employee:
        return None
    if full_name is not None:
        employee.full_name = full_name
    if role is not None:
        employee.role = role
    if phone is not None:
        employee.phone = phone
    if profile_pic_path is not None:
        employee.profile_pic = profile_pic_path
    if password:
        if not employee.login:
            # اگر به هر دلیل login نداشت
            login = Login(employee_id=employee.employee_id, username=f"user{employee.employee_id}", password_hash=hash_password(password))
            db.add(login)
        else:
            employee.login.password_hash = hash_password(password)

    db.commit()
    db.refresh(employee)
    return employee

def delete_employee(db: Session, employee_id: int) -> bool:
    emp = get_employee_by_id(db, employee_id)
    if not emp:
        return False
    if emp.login:
        db.delete(emp.login)
    db.delete(emp)
    db.commit()
    return True

def change_role(db: Session, employee_id: int, new_role: str) -> Employee | None:
    emp = get_employee_by_id(db, employee_id)
    if not emp:
        return None
    emp.role = new_role
    db.commit()
    db.refresh(emp)
    return emp

# created by: professor zabihullah burhani
# ICT and AI and Robotics متخصص
# phone: 0705002913, email: zabihullahburhani@gmail.com
# Address: Takhar University, COmputer science faculty.

# path: backend/app/models/user.py
from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Text, Float
from sqlalchemy.orm import relationship
import datetime
from app.core.database import Base

class Employee(Base):
    __tablename__ = "employees"
    employee_id = Column(Integer, primary_key=True, index=True)
    full_name = Column(String, nullable=False)
    role = Column(String, nullable=False)
    phone = Column(String, nullable=True)
    profile_pic = Column(Text, nullable=True)  # مطابق DB فعلی شما
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

    login = relationship("Login", uselist=False, back_populates="employee")

class Login(Base):
    __tablename__ = "logins"
    login_id = Column(Integer, primary_key=True, index=True)
    employee_id = Column(Integer, ForeignKey("employees.employee_id"))
    username = Column(String, unique=True, index=True, nullable=False)
    password_hash = Column(String, nullable=False)
    last_login = Column(DateTime, default=datetime.datetime.utcnow)

    employee = relationship("Employee", back_populates="login")

# path: backend/app/schemas/user.py
from pydantic import BaseModel
from typing import Optional

# ----- Auth -----
class LoginIn(BaseModel):
    username: str
    password: str

class TokenOut(BaseModel):
    access_token: str
    token_type: str = "bearer"
    role: str

# ----- Employee -----
class EmployeeCreate(BaseModel):
    full_name: str
    username: str
    password: str
    role: str = "user"
    phone: Optional[str] = None

class EmployeeUpdate(BaseModel):
    full_name: Optional[str] = None
    role: Optional[str] = None
    phone: Optional[str] = None
    password: Optional[str] = None  # تغییر رمز اختیاری

class EmployeeOut(BaseModel):
    employee_id: int
    full_name: str
    role: str
    phone: Optional[str] = None
    username: str
    profile_pic: Optional[str] = None

    class Config:
        from_attributes = True  # SQLAlchemy -> Pydantic

# created by: professor zabihullah burhani
# ICT and AI and Robotics متخصص
# phone: 0705002913, email: zabihullahburhani@gmail.com
# Address: Takhar University, COmputer science faculty.

# path: backend/app/main.py
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles

from app.core.config import settings
from app.core.database import Base, engine
from app.api.v1.auth import router as auth_router
from app.api.v1.users import router as users_router
from app.api.v1.customers import router as customers_router

# اگر لازم شد جداول جدید ساخته شوند (برای SQLite)
Base.metadata.create_all(bind=engine)

app = FastAPI(title=settings.PROJECT_NAME)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# سرو کردن عکس‌های پروفایل
app.mount("/static", StaticFiles(directory="static"), name="static")

# API v1
app.include_router(auth_router, prefix="/api/v1")
app.include_router(users_router, prefix="/api/v1")
#customer
app.include_router(customers_router, prefix="/api/v1")
@app.get("/health")
def health():
    return {"status": "ok"}

# created by: professor zabihullah burhani
# ICT and AI and Robotics متخصص
# phone: 0705002913, email: zabihullahburhani@gmail.com
# Address: Takhar University, COmputer science faculty.

کد های فرانت اند:
"use client";
import React, { useEffect, useState } from "react";
import {
  fetchCustomers as apiFetchCustomers,
  createCustomer as apiCreateCustomer,
  updateCustomer as apiUpdateCustomer,
  deleteCustomer as apiDeleteCustomer,
} from "../../services/customers_api";
import { Card, CardHeader, CardContent } from "./ui/card";

interface Customer {
  customer_id: number;
  full_name: string;
  phone: string;
  address: string;
  created_at: string;
}

export default function Customers() {
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [newCustomer, setNewCustomer] = useState({
    full_name: "",
    phone: "",
    address: "",
  });

  const loadCustomers = async () => {
    const data = await apiFetchCustomers();
    setCustomers(Array.isArray(data) ? data : []);
  };

  useEffect(() => {
    loadCustomers();
  }, []);

  const handleCreate = async () => {
    await apiCreateCustomer(newCustomer);
    setNewCustomer({ full_name: "", phone: "", address: "" });
    loadCustomers();
  };

  const handleDelete = async (id: number) => {
    await apiDeleteCustomer(id);
    loadCustomers();
  };

  return (
    <Card>
      <CardHeader>مدیریت مشتریان</CardHeader>
      <CardContent>
        {/* فرم افزودن */}
        <div className="space-y-2">
          <input
            type="text"
            placeholder="نام کامل"
            value={newCustomer.full_name}
            onChange={(e) => setNewCustomer({ ...newCustomer, full_name: e.target.value })}
            className="border p-1 text-black"
          />
          <input
            type="text"
            placeholder="شماره تماس"
            value={newCustomer.phone}
            onChange={(e) => setNewCustomer({ ...newCustomer, phone: e.target.value })}
            className="border p-1 text-black"
          />
          <input
            type="text"
            placeholder="آدرس"
            value={newCustomer.address}
            onChange={(e) => setNewCustomer({ ...newCustomer, address: e.target.value })}
            className="border p-1 text-black"
          />
          <button onClick={handleCreate} className="bg-yellow-500 p-2 rounded text-black">
            ثبت مشتری
          </button>
        </div>

        {/* جدول */}
        <table className="w-full mt-4 border text-yellow-400">
          <thead>
            <tr>
              <th>کد</th>
              <th>نام</th>
              <th>شماره</th>
              <th>آدرس</th>
              <th>تاریخ</th>
              <th>عملیات</th>
            </tr>
          </thead>
          <tbody>
            {customers.map((c) => (
              <tr key={c.customer_id}>
                <td>{c.customer_id}</td>
                <td>{c.full_name}</td>
                <td>{c.phone}</td>
                <td>{c.address}</td>
                <td>{new Date(c.created_at).toLocaleDateString()}</td>
                <td>
                  <button
                    onClick={() => handleDelete(c.customer_id)}
                    className="text-red-500"
                  >
                    حذف
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </CardContent>
    </Card>
  );
}

// frontend/src/services/api.ts
export const API_BASE = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";

interface LoginResponse {
  access_token: string;
  token_type: string;
  role: string;
}

// Login function
export async function login(username: string, password: string): Promise<{ ok: boolean; data: LoginResponse | { detail: string } }> {
  try {
    const res = await fetch(`${API_BASE}/auth/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password }),
    });
    const data = await res.json();
    if (res.ok) localStorage.setItem("token", data.access_token);
    return { ok: res.ok, data };
  } catch (err: any) {
    return { ok: false, data: { detail: err.message } };
  }
}

// Create new employee with optional profile picture
export async function createEmployee(user: {
  full_name: string;
  username: string;
  password: string;
  role: string;
  phone?: string;
  profile_pic?: File | null;
}): Promise<{ ok: boolean; data: any }> {
  const token = localStorage.getItem("token");
  if (!token) throw new Error("No token found");

  try {
    const formData = new FormData();
    formData.append("full_name", user.full_name);
    formData.append("username", user.username);
    formData.append("password", user.password);
    formData.append("role", user.role);
    if (user.phone) formData.append("phone", user.phone);
    if (user.profile_pic) formData.append("profile_pic", user.profile_pic);

    const res = await fetch(`${API_BASE}/users`, {
      method: "POST",
      headers: { Authorization: `Bearer ${token}` },
      body: formData,
    });
    const data = await res.json();
    return { ok: res.ok, data };
  } catch (err: any) {
    return { ok: false, data: { detail: err.message } };
  }
}

// Fetch list of employees
export async function fetchEmployees(): Promise<{ ok: boolean; data: any[] }> {
  const token = localStorage.getItem("token");
  if (!token) throw new Error("No token found");

  try {
    const res = await fetch(`${API_BASE}/users`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    const data = await res.json();
    return { ok: res.ok, data };
  } catch (err: any) {
    return { ok: false, data: [] };
  }
}

// Update employee
export async function updateEmployee(
  id: number,
  payload: {
    full_name?: string;
    password?: string;
    role?: string;
    phone?: string;
    profile_pic?: File | null;
  }
): Promise<{ ok: boolean; data: any }> {
  const token = localStorage.getItem("token");
  if (!token) throw new Error("No token found");

  try {
    const formData = new FormData();
    if (payload.full_name) formData.append("full_name", payload.full_name);
    if (payload.password) formData.append("password", payload.password);
    if (payload.role) formData.append("role", payload.role);
    if (payload.phone) formData.append("phone", payload.phone);
    if (payload.profile_pic) formData.append("profile_pic", payload.profile_pic);

    const res = await fetch(`${API_BASE}/users/${id}`, {
      method: "PUT",
      headers: { Authorization: `Bearer ${token}` },
      body: formData,
    });
    const data = await res.json();
    return { ok: res.ok, data };
  } catch (err: any) {
    return { ok: false, data: { detail: err.message } };
  }
}

// Delete employee
export async function deleteEmployee(id: number): Promise<{ ok: boolean; data: any }> {
  const token = localStorage.getItem("token");
  if (!token) throw new Error("No token found");

  try {
    const res = await fetch(`${API_BASE}/users/${id}`, {
      method: "DELETE",
      headers: { Authorization: `Bearer ${token}` },
    });
    const data = await res.json();
    return { ok: res.ok, data };
  } catch (err: any) {
    return { ok: false, data: { detail: err.message } };
  }
}


// frontend/src/components/admin/ui/card.tsx
// Reusable Card components for UI consistency.
// No changes needed.
// Created by: Professor Zabihullah Burhani
// ICT and AI and Robotics Specialist
// Phone: 0705002913, Email: zabihullahburhani@gmail.com
// Address: Takhar University, Computer Science Faculty.

import React from "react";

interface CardProps {
  children: React.ReactNode;
  className?: string;
}

export function Card({ children, className }: CardProps) {
  return (
    <div className={`rounded-2xl shadow-md border p-4 bg-white ${className}`}>
      {children}
    </div>
  );
}

export function CardHeader({ children }: { children: React.ReactNode }) {
  return <div className="mb-2 font-bold text-lg">{children}</div>;
}

export function CardContent({ children }: { children: React.ReactNode }) {
  return <div>{children}</div>;
}
// src/services/customers_api.ts
const API_BASE = process.env.NEXT_PUBLIC_API_BASE || "http://localhost:8000";
const API_URL = `${API_BASE}/customers`;

export async function fetchCustomers() {
  const res = await fetch(API_URL);
  return res.json();
}

export async function createCustomer(data: any) {
  const res = await fetch(API_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  });
  return res.json();
}

export async function updateCustomer(id: number, data: any) {
  const res = await fetch(`${API_URL}/${id}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  });
  return res.json();
}

export async function deleteCustomer(id: number) {
  await fetch(`${API_URL}/${id}`, { method: "DELETE" });
}

